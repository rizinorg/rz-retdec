NAME=crackme x86_32
FILE=rizin-testbins/elf/crackme0x05
EXPECT=<<EOF
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>
#include <stdio.h>

void check(int32_t a1);

// --------------------- Global Variables ---------------------

int32_t g1;

// ------------------------ Functions -------------------------

// Address range: 0x8048540 - 0x804859c
int main() {
    // 0x8048540
    int32_t v1; // bp-144, 0x8048540
    int32_t v2 = &v1; // 0x8048549
    int32_t * v3 = (int32_t *)(v2 - 16); // 0x804855f
    *v3 = (int32_t)"IOLI Crackme Level 0x05\n";
    printf();
    *v3 = (int32_t)"Password: ";
    printf();
    int32_t var_7ch; // bp-124, 0x8048540
    int32_t v4 = &var_7ch; // 0x804857a
    *(int32_t *)(v2 - 12) = v4;
    *v3 = (int32_t)"%s";
    scanf();
    *v3 = v4;
    check((int32_t)&g1);
    return 0;
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (3.4.6)
// Detected functions: 1

EOF
CMDS=<<EOF
s main
af
pdz
EOF
RUN

NAME=x86_64
FILE=rizin-testbins/elf/hello_world
EXPECT=<<EOF
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// --------------------- Global Variables ---------------------

int64_t g1 = 0x7220006f6c6c6548; // 0x8d4
int64_t g2 = 0x6b6c6f662d327220; // 0x8da

// ------------------------ Functions -------------------------

// Address range: 0x7aa - 0x847
int main() {
    int64_t len = strlen((int64_t)&g1); // 0x7cf
    int64_t mem = malloc(0x100000000 * (strlen((int64_t)&g2) + len) + 0x100000000 >> 32); // 0x7f6
    int32_t result = 0; // 0x804
    if (mem != 0) {
        // 0x806
        strcpy(mem, (int64_t)&g1);
        strcat(mem, (int64_t)&g2);
        puts(mem);
        result = free(mem);
    }
    // 0x844
    return result;
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (7.2.0)
// Detected functions: 1

EOF
CMDS=<<EOF
s main
af
pdz
EOF
RUN

NAME=aeropause32 (many features combined)
FILE=rizin-testbins/elf/dectest32
CMDS=<<EOF
aaa
to bins/types.h
s sym.Aeropause
afvs 4 bright "Bright *"
afvs 8 argc int32_t
afvs 12 argv "const char **"
pdz
EOF
EXPECT=<<EOF
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ------------------- Function Prototypes --------------------

void Aeropause(int32_t a1, char ** argv);
void PrintAmbassador(int64_t a1);

// --------------------- Global Variables ---------------------

int32_t g1;
int32_t g2;

// ------------------------ Functions -------------------------

// Address range: 0x80492de - 0x804945c
void Aeropause(int32_t a1, char ** argv) {
    char ** v1 = (char **)a1;
    *(int32_t *)a1 = malloc(8);
    *(int32_t *)*v1 = (int32_t)argv;
    char * v2 = *v1; // 0x8049310
    int32_t * v3; // 0x80492de
    if (*(int32_t *)v2 < 2) {
        int32_t * v4 = (int32_t *)(a1 + 8);
        *v4 = 0;
        v3 = v4;
    } else {
        int32_t str = *(int32_t *)(*(int32_t *)((int32_t)v2 + 4) + 4); // 0x8049330
        int32_t * str2 = (int32_t *)(a1 + 4); // 0x8049336
        *str2 = str;
        if (strcmp(str, "the  ") != 0) {
            // 0x8049360
            if (strcmp(*str2, "dark") != 0) {
                int32_t * v5 = (int32_t *)(a1 + 8);
                if (strcmp(*str2, "third") != 0) {
                    // 0x80493ae
                    *v5 = 0xf4240;
                    v3 = v5;
                } else {
                    // 0x80493a2
                    *v5 = 3;
                    v3 = v5;
                }
            } else {
                int32_t * v6 = (int32_t *)(a1 + 8);
                *v6 = 2;
                v3 = v6;
            }
        } else {
            int32_t * v7 = (int32_t *)(a1 + 8);
            *v7 = 1;
            v3 = v7;
        }
    }
    // 0x80493b8
    int32_t v8; // bp-12, 0x80492de
    int32_t v9 = &v8; // 0x80492ee
    g1 = a1;
    uint32_t v10 = *v3; // 0x80493bb
    if (v10 < 5) {
        switch (a1) {
            case 0: {
                // 0x80493da
                *(int32_t *)(v9 - 16) = (int32_t)"pure";
                printf();
                // break -> 0x8049447
                break;
            }
            case 1: {
                // 0x80493ec
                *(int32_t *)(v9 - 16) = (int32_t)"reason";
                printf();
                // break -> 0x8049447
                break;
            }
            case 2: {
                // 0x80493fe
                *(int32_t *)(v9 - 16) = (int32_t)"revolution";
                printf();
                // break -> 0x8049447
                break;
            }
            case 3: {
                // 0x8049410
                *(int32_t *)(v9 - 16) = (int32_t)"echoes";
                printf();
                // break -> 0x8049447
                break;
            }
            case 4: {
                // 0x8049422
                *(int32_t *)(v9 - 16) = (int32_t)"wall";
                printf();
                // break -> 0x8049447
                break;
            }
        }
    } else {
        if (v10 == 0xf4240) {
            // 0x8049434
            *(int32_t *)(v9 - 16) = (int32_t)"million";
            printf();
        }
    }
    // 0x8049447
    *(int32_t *)(v9 - 16) = *v3;
    PrintAmbassador((int64_t)&g2);
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (9.2.0)
// Detected functions: 1

EOF
RUN

NAME=aeropause64 (many features combined)
FILE=rizin-testbins/elf/dectest64
EXPECT=<<EOF
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ------------------- Function Prototypes --------------------

void Aeropause(int32_t argc, char ** a2);
void PrintAmbassador(int64_t a1);

// --------------------- Global Variables ---------------------

int64_t g1;

// ------------------------ Functions -------------------------

// Address range: 0x40127e - 0x401410
void Aeropause(int32_t argc, char ** a2) {
    int64_t v1 = argc;
    int64_t v2 = 16; // 0x401291
    *(int64_t *)v1 = malloc(16);
    *(int32_t *)16 = (int32_t)(int64_t)a2;
    int32_t * v3; // 0x40127e
    if (*(int32_t *)&v2 < 2) {
        int32_t * v4 = (int32_t *)(v1 + 16);
        *v4 = 0;
        v3 = v4;
    } else {
        int64_t str = *(int64_t *)(*(int64_t *)(v2 + 8) + 8); // 0x4012e9
        int64_t * str2 = (int64_t *)(v1 + 8); // 0x4012f1
        *str2 = str;
        if ((int32_t)strcmp(str, "the  ") != 0) {
            // 0x40131b
            if ((int32_t)strcmp(*str2, "dark") != 0) {
                int32_t * v5 = (int32_t *)(v1 + 16);
                if ((int32_t)strcmp(*str2, "third") != 0) {
                    // 0x401367
                    *v5 = 0xf4240;
                    v3 = v5;
                } else {
                    // 0x40135a
                    *v5 = 3;
                    v3 = v5;
                }
            } else {
                int32_t * v6 = (int32_t *)(v1 + 16);
                *v6 = 2;
                v3 = v6;
            }
        } else {
            int32_t * v7 = (int32_t *)(v1 + 16);
            *v7 = 1;
            v3 = v7;
        }
    }
    // 0x401372
    g1 = v1;
    uint32_t v8 = *v3; // 0x401376
    if (v8 < 5) {
        switch (v1) {
            case 0: {
                // 0x401398
                printf("pure");
                // break -> 0x4013ff
                break;
            }
            case 1: {
                // 0x4013a9
                printf("reason");
                // break -> 0x4013ff
                break;
            }
            case 2: {
                // 0x4013ba
                printf("revolution");
                // break -> 0x4013ff
                break;
            }
            case 3: {
                // 0x4013cb
                printf("echoes");
                // break -> 0x4013ff
                break;
            }
            case 4: {
                // 0x4013dc
                printf("wall");
                // break -> 0x4013ff
                break;
            }
        }
    } else {
        if (v8 == 0xf4240) {
            // 0x4013ed
            printf("million");
        }
    }
    // 0x4013ff
    PrintAmbassador((int64_t)*v3);
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (9.2.0)
// Detected functions: 1

EOF
CMDS=<<EOF
aaa

# TODO: remove these when rizin can do it automatically
afvr rdi format "const char *" @ sym.imp.printf
afvr rdi size size_t @ sym.imp.malloc
afvr rdi s1 "const char *" @ sym.imp.strcmp
afvr rsi s2 "const char *" @ sym.imp.strcmp

to bins/types.h

s sym.Aeropause
afvr rdi bright "Bright *"
afvr rsi argc int32_t
afvr rdx argv "const char **"
pdz
EOF
RUN

NAME=stackvars bp
FILE=rizin-testbins/elf/vars-complex-x86_64-bp
CMDS=<<EOF
aa
s sym.leaffunc
afvr rdi a int *
afvr rsi b int *
afvr rdx c int *
afvr rcx d int *
s sym.varfunc
afvs -0x20 lightbulb int
afvs -0x1c sun int
afvs -0x18 last int
afvs -0x14 chance int
pdz
EOF
EXPECT=<<EOF
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>

// ------------------- Function Prototypes --------------------

void leaffunc(int32_t * a1, int32_t * a2, int32_t * a3, int32_t * a4);
void varfunc(int64_t arg1);

// ------- Dynamically Linked Functions Without Header --------

int64_t __stack_chk_fail(void);

// ------------------------ Functions -------------------------

// Address range: 0x115c - 0x1211
void varfunc(int64_t arg1) {
    int64_t v1 = __readfsqword(40); // 0x1167
    int32_t v2 = arg1; // 0x1176
    int32_t chance; // bp-20, 0x115c
    int32_t last; // bp-24, 0x115c
    int32_t lightbulb; // bp-32, 0x115c
    int32_t sun; // bp-28, 0x115c
    if (v2 != 1) {
        if (v2 != 2) {
            // 0x11be
            lightbulb = 42;
            sun = 42;
            last = 42;
            chance = 42;
        } else {
            // 0x11a0
            lightbulb = 9;
            sun = 8;
            last = 7;
            chance = 6;
        }
    } else {
        // 0x117c
        lightbulb = 1;
        sun = 2;
        last = 3;
        chance = 4;
    }
    // 0x11da
    leaffunc(&lightbulb, &sun, &last, &chance);
    sun = chance;
    if (v1 != __readfsqword(40)) {
        // 0x120a
        __stack_chk_fail();
    }
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (11.3.0)
// Detected functions: 1

EOF
RUN

NAME=stackvars sp
FILE=rizin-testbins/elf/vars-complex-x86_64-sp
CMDS=<<EOF
aa
s sym.leaffunc
afvr rdi a int *
afvr rsi b int *
afvr rdx c int *
afvr rcx d int *
s sym.varfunc
afvs -0x20 lightbulb int
afvs -0x1c sun int
afvs -0x18 last int
afvs -0x14 chance int
pdz
EOF
EXPECT=<<EOF
//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>

// ------------------- Function Prototypes --------------------

void leaffunc(int32_t * a1, int32_t * a2, int32_t * a3, int32_t * a4);
void varfunc(int64_t arg1);

// ------- Dynamically Linked Functions Without Header --------

int64_t __stack_chk_fail(void);

// ------------------------ Functions -------------------------

// Address range: 0x115b - 0x1227
void varfunc(int64_t arg1) {
    int64_t v1 = __readfsqword(40); // 0x1163
    int32_t v2 = arg1; // 0x1173
    int32_t chance; // bp-20, 0x115b
    int32_t last; // bp-24, 0x115b
    int32_t lightbulb; // bp-32, 0x115b
    int32_t sun; // bp-28, 0x115b
    if (v2 != 1) {
        if (v2 != 2) {
            // 0x11c5
            lightbulb = 42;
            sun = 42;
            last = 42;
            chance = 42;
        } else {
            // 0x11a3
            lightbulb = 9;
            sun = 8;
            last = 7;
            chance = 6;
        }
    } else {
        // 0x117a
        lightbulb = 1;
        sun = 2;
        last = 3;
        chance = 4;
    }
    // 0x11e5
    leaffunc(&lightbulb, &sun, &last, &chance);
    sun = chance;
    if (v1 != __readfsqword(40)) {
        // 0x121d
        __stack_chk_fail();
    }
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (11.3.0)
// Detected functions: 1

EOF
RUN
